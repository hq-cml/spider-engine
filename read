基于Golang的迷你版搜索引擎

Spider-Engine是一款基于Go实现的的迷你搜索引擎，参考借鉴了通用SE的实现方案。

支持的功能：
1. 类比Mysql和ES，支持库、表、字段级别的存储单元管理
2. 字段支持字符串类型、数字类型、时间类型
3. 字符类型的字段，可以选择分词模式和完整模式
1. 底层实现倒排、正排索引，支持搜索和字段信息获取
2. 文本分词（基于jiebago）
3. 支持搜索 & 过滤 & 排序
3. 搜索结果排序，DF-IDF算法
4. 单个字段全文索引，SE区别于Mysql的最大特点
5. 跨多字段全文索引（所有字符串类型的字段）
6. 底层分区，类似于Mysql的分区概念
7. 底层分区自动创建、合并，上层无感
8. 读写并发安全，同时进行文档增删改、索引建立、查询
9. Rest接口
10. 尽量做到无外部依赖，小部分已经用govendor做了自依赖

不支持的功能
1. 数字类型的倒排索引
2. 浮点类型，请先用字符串类型代替


概念解释与对齐：
	对于存储引擎，很多概念相对类似、通用，但又有些许区别，比如同一个表的概念，在Mysql中称之为表，在ES中称之为index。
	这里统一解释拉平一下：开发文档

获取与编译：
go get github.com/hq-cml/spider-engine
cd $GOPATH/src/github.com/hq-cml/spider-engine/
go build ./

安装与启动：
export SPIDER_PATH=/tmp/spider-engine   #期望的部署路径
./install.sh
cd $SPIDER_PATH
./spider-engine


关于支持的字段类型：
目前spider一共支持6种type字段，如下：
primary:主键，目前仅支持字符型，如果用户不创建主键，那么spider会自动创建默认主键
whole:单一字符型，系统生成倒排的时候，不会进行分词，即全词匹配检索，使用场景诸如：姓名，唯一Id等等
number：数字型，目前只支持整数，系统底层不会为number类型建立倒排
time：时间类型，以字符类型传入，目前支持'2019-05-11' 或者'2019-05-11 08:30:00'两种形式，底层支持对时间类型进行过滤和排序
words：普通字符型，该类型字段会进行分词器分词，是搜索引擎与Mysql的最大区别所在，分词后的字段可以进行快速检索，适用于人员介绍、评价等等。
pure：纯字符类型，该类型不会建立倒排索引，仅拥有正排索引，不支持对该字段进行检索，用于完整文档的获取与现实。

接口使用说明：

建库：
{
    "database":"sp_db"
}

建表：
{
	"database":"sp_db",
	"table":"user",
	"fields":[
		{"name":"user_id", "type":"primary"},
		{"name":"user_name", "type":"whole"},
		{"name":"agent", "type":"number"},
		{"name":"user_desc", "type":"words"}
	]
}


增、减字段：
{
	"database":"sp_db",
	"table":"user",
	"field": {"name":"user_desc", "type":"words"}
}

增加文档：
{
	"database":"sp_db",
	"table":"user",
	"content":{
		"user_id":"10001",
		"user_name":"张三",
		"date":23,
		"user_desc":"喜欢看书，也喜欢运动。他是一个文武兼备的人。"
	}
}

删除文档：
{
	"database":"test",
	"table":"user",
	"primary_key":"10004"
}

编辑文档：
{
	"database":"sp_db",
	"table":"user",
	"content":{
		"user_id":"10001",
		"user_name":"张三",
		"date":23,
		"user_desc":"喜欢看书，也喜欢运动。他是一个文武兼备的人。"
	}
}

获取文档：
_getDoc?db=sp_db&table=weibo&primary_key=10001

搜索：
{
	"database":"sp_db",
	"table":"user",
	"field_name":"user_desc",
	"value":"运动"
}

跨字段搜索：
{
	"database":"sp_db",
	"table":"user",
	"value":"运动"
}

过滤器：



TODO列表
1. 分布式高可用存储，目前思路是引入etcd，或者将etcd-raft模块移植过来使用
2. 分布式得搜索，区别于分布式的存储
2. 更加智能的排序规则，目前仅支持简单的DF-IDF算法
3. 更高的并发性能，支持并发保证一致性，内部采用了一些读写锁和channel做串行化，对性能有一定的损伤
4. 搜索性能加速，后续可以实施多个分区同时并发进行搜索



开发文档：
整体架构如图：


概念解释与对齐：
	对于存储引擎，很多概念相对类似、通用，但又有些许区别，比如同一个这里详细解释一下。
文档：存储的基本单位，是一条结构化了的数据，对等的，可以理解为Mysql表中的一条记录。
倒排：SE的底层存储结构，一个文档的字符内容，被分词之后，会形成多个词条，倒排就是一种映射关系，Map：词条=>文档Id。有了这个倒排映射，那么搜索功能将变得简单高效。
正排：SE的底层存储结构，相对于倒排的逆映射，文档Id=>字段内容。这主要用于结果的过滤以及完整文档的生成，例如一个文档的所有字段的正排合在一起，就是一个完整的文档内容。
字段：文档的基本组成单位，一个文档由多个字段组成，这和Mysql中的概念是一致的。在spider-engine中，每个字段都会拥有一个正排；字符类型的字段，可以拥有倒排。
索引过程：将文档数据各个字段生成可供搜索的倒排索引和正排索引的过程就是索引过程。在spider-engine中，当增加一个文档后，这一过程将自动进行。
表：类比于Mysql的表，多个拥有相同字段定义的文档，组成一张表。
库：类比于Mysql的库，表的管理容器，多个表组成一个库。
分区：类比于Mysql的分区，底层的存储结构，整体表的一部分数据（为了将来分布式、数据容错、数据迁移等预留想想空间），本质上一个分区就已经拥有完整的索引套件：正排+倒排+字段。能够执行独立的搜索，最终的搜索结果其实是各个分区独立搜索结果的并集。
检索：即搜索，即给定一个关键词或一句话，针对某个字段进行搜索。通常还会伴有过滤和排序等操作。本质上底层会用到倒排索引+正排索引。



倒排的实现：

使用MMAP方式进行数据存储和读取
使用B+树进行字典和key的存储


正排的实现：

分区的实现：

分词的实现：
依赖jiebago和sego

排序：
默认使用文本相关性进行排序
